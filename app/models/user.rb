class User < ApplicationRecord
  has_many :job_postings, class_name: "Job", foreign_key: "student_id"
  has_many :teaching_jobs, class_name: "Job", foreign_key: "tutor_id"

  has_many :user_topics
  has_many :topics, through: :user_topics

  def subjects
    self.topics.map do |topic|
      topic.subject
    end.uniq
  end

  has_secure_password

  def password=(new_password)
    salt = BCrypt::Engine::generate_salt
    hashed = BCrypt::Engine::hash_secret(new_password, salt)
    self.password_digest = salt + hashed
  end

# authenticate(password: string) -> User?
  def authenticate(password)
    # Salts generated by generate_salt are always 29 chars long.
    salt = password_digest[0..28]
    hashed = BCrypt::Engine::hash_secret(password, salt)
    return nil unless (salt + hashed) == self.password_digest
  end
  # has_many :wanting_help,  class_name:  "Relationship",
  #                                  foreign_key: "follower_id",
  #                                  dependent:   :destroy
  # has_many :passive_relationships, class_name:  "Relationship",
  #                                  foreign_key: "followed_id",
  #                                  dependent:   :destroy
  # has_many :following, through: :active_relationships,  source: :followed
  # has_many :followers, through: :passive_relationships, source: :follower
end
