class User < ApplicationRecord
  has_many :job_postings, class_name: "Job", foreign_key: "student_id"
  has_many :teaching_jobs, class_name: "Job", foreign_key: "tutor_id"

  has_many :user_topics
  has_many :topics, through: :user_topics

  has_secure_password

  def subjects
    self.topics.map do |topic|
      topic.subject
    end.uniq
  end



  # def password=(new_password)
  #   salt = BCrypt::Engine::generate_salt
  #   hashed = BCrypt::Engine::hash_secret(new_password, salt)
  #   self.password_digest = salt + hashed
  # end

# authenticate(password: string) -> User?
  # def authenticate(password)
  #   # Salts generated by generate_salt are always 29 chars long.
  #   salt = password_digest[0..28]
  #   hashed = BCrypt::Engine::hash_secret(password, salt)
  #   return nil unless (salt + hashed) == self.password_digest
  # end

end
